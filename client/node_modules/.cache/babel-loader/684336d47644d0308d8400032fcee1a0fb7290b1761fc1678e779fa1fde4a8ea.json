{"ast":null,"code":"var _jsxFileName = \"/Users/macpro/Desktop/scfinal/schedule_chungdam/client/src/AudioRecord.js\",\n  _s = $RefreshSig$();\n/* eslint-disable */\nimport React, { useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AudioRecord = ({\n  setPause,\n  setReceivedData,\n  newData,\n  setError\n}) => {\n  _s();\n  const [stream, setStream] = useState();\n  const [media, setMedia] = useState();\n  const [onRec, setOnRec] = useState(true);\n  const [source, setSource] = useState();\n  const [analyser, setAnalyser] = useState();\n  const [audioUrl, setAudioUrl] = useState();\n  const onRecAudio = () => {\n    //setPause(true);\n    // 음원정보를 담은 노드를 생성하거나 음원을 실행또는 디코딩 시키는 일을 한다\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    // 자바스크립트를 통해 음원의 진행상태에 직접접근에 사용된다.\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\n    setAnalyser(analyser);\n    function makeSound(stream) {\n      // 내 컴퓨터의 마이크나 다른 소스를 통해 발생한 오디오 스트림의 정보를 보여준다.\n      const source = audioCtx.createMediaStreamSource(stream);\n      setSource(source);\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    }\n    // 마이크 사용 권한 획득\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      setStream(stream);\n      setMedia(mediaRecorder);\n      makeSound(stream);\n      setPause(true);\n      analyser.onaudioprocess = function (e) {\n        // 3분(180초) 지나면 자동으로 음성 저장 및 녹음 중지\n        if (e.playbackTime > 180) {\n          stream.getAudioTracks().forEach(function (track) {\n            track.stop();\n          });\n          mediaRecorder.stop();\n          // 메서드가 호출 된 노드 연결 해제\n          analyser.disconnect();\n          audioCtx.createMediaStreamSource(stream).disconnect();\n          mediaRecorder.ondataavailable = function (e) {\n            setAudioUrl(e.data);\n            setOnRec(true);\n          };\n        } else {\n          setOnRec(false);\n        }\n      };\n    });\n  };\n\n  // 사용자가 음성 녹음을 중지했을 때\n  const offRecAudio = () => {\n    // dataavailable 이벤트로 Blob 데이터에 대한 응답을 받을 수 있음\n    media.ondataavailable = function (e) {\n      setAudioUrl(e.data);\n      setOnRec(true);\n    };\n\n    // 모든 트랙에서 stop()을 호출해 오디오 스트림을 정지\n    stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    });\n\n    // 미디어 캡처 중지\n    media.stop();\n    // 메서드가 호출 된 노드 연결 해제\n    analyser.disconnect();\n    source.disconnect();\n  };\n  const onSubmitAudioFile = useCallback(() => {\n    const formData = new FormData();\n    // robot에 현재 로봇 위치, 방향 정보 넣어서 리턴해주어야 함.\n\n    const newroad = newData;\n    formData.append(\"file\", audioUrl);\n    formData.append(\"newroad\", JSON.stringify(newroad));\n    fetch(\"http://127.0.0.1:5000/voice-recognization\", {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json()).then(data => {\n      setReceivedData({\n        data: data.ret\n      });\n      setError(\" \");\n      if (data.status === -1) {\n        setError(data.err);\n      }\n    }).catch(error => console.error(\"Error:\", error));\n  }, [audioUrl]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onRec ? onRecAudio : offRecAudio,\n      children: \"\\uB179\\uC74C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onSubmitAudioFile,\n      children: \"\\uACB0\\uACFC \\uD655\\uC778\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(AudioRecord, \"Ym7lBIG9wpNpsfr11t0+46zJZ8A=\");\n_c = AudioRecord;\nexport default AudioRecord;\nvar _c;\n$RefreshReg$(_c, \"AudioRecord\");","map":{"version":3,"names":["React","useState","useCallback","jsxDEV","_jsxDEV","Fragment","_Fragment","AudioRecord","setPause","setReceivedData","newData","setError","_s","stream","setStream","media","setMedia","onRec","setOnRec","source","setSource","analyser","setAnalyser","audioUrl","setAudioUrl","onRecAudio","audioCtx","window","AudioContext","webkitAudioContext","createScriptProcessor","makeSound","createMediaStreamSource","connect","destination","navigator","mediaDevices","getUserMedia","audio","then","mediaRecorder","MediaRecorder","start","onaudioprocess","e","playbackTime","getAudioTracks","forEach","track","stop","disconnect","ondataavailable","data","offRecAudio","onSubmitAudioFile","formData","FormData","newroad","append","JSON","stringify","fetch","method","body","response","json","ret","status","err","catch","error","console","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/macpro/Desktop/scfinal/schedule_chungdam/client/src/AudioRecord.js"],"sourcesContent":["/* eslint-disable */\nimport React, { useState, useCallback } from \"react\";\n\nconst AudioRecord = ({ setPause, setReceivedData, newData, setError }) => {\n  const [stream, setStream] = useState();\n  const [media, setMedia] = useState();\n  const [onRec, setOnRec] = useState(true);\n  const [source, setSource] = useState();\n  const [analyser, setAnalyser] = useState();\n  const [audioUrl, setAudioUrl] = useState();\n\n  const onRecAudio = () => {\n    //setPause(true);\n    // 음원정보를 담은 노드를 생성하거나 음원을 실행또는 디코딩 시키는 일을 한다\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    // 자바스크립트를 통해 음원의 진행상태에 직접접근에 사용된다.\n    const analyser = audioCtx.createScriptProcessor(0, 1, 1);\n    setAnalyser(analyser);\n\n    function makeSound(stream) {\n      // 내 컴퓨터의 마이크나 다른 소스를 통해 발생한 오디오 스트림의 정보를 보여준다.\n      const source = audioCtx.createMediaStreamSource(stream);\n      setSource(source);\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n    }\n    // 마이크 사용 권한 획득\n    navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorder.start();\n      setStream(stream);\n      setMedia(mediaRecorder);\n      makeSound(stream);\n\n      setPause(true);\n      analyser.onaudioprocess = function (e) {\n        // 3분(180초) 지나면 자동으로 음성 저장 및 녹음 중지\n        if (e.playbackTime > 180) {\n          stream.getAudioTracks().forEach(function (track) {\n            track.stop();\n          });\n          mediaRecorder.stop();\n          // 메서드가 호출 된 노드 연결 해제\n          analyser.disconnect();\n          audioCtx.createMediaStreamSource(stream).disconnect();\n\n          mediaRecorder.ondataavailable = function (e) {\n            setAudioUrl(e.data);\n            setOnRec(true);\n          };\n        } else {\n          setOnRec(false);\n        }\n      };\n    });\n  };\n\n  // 사용자가 음성 녹음을 중지했을 때\n  const offRecAudio = () => {\n    // dataavailable 이벤트로 Blob 데이터에 대한 응답을 받을 수 있음\n    media.ondataavailable = function (e) {\n      setAudioUrl(e.data);\n      setOnRec(true);\n    };\n\n    // 모든 트랙에서 stop()을 호출해 오디오 스트림을 정지\n    stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    });\n\n    // 미디어 캡처 중지\n    media.stop();\n    // 메서드가 호출 된 노드 연결 해제\n    analyser.disconnect();\n    source.disconnect();\n  };\n\n  const onSubmitAudioFile = useCallback(() => {\n    const formData = new FormData();\n    // robot에 현재 로봇 위치, 방향 정보 넣어서 리턴해주어야 함.\n\n    const newroad = newData;\n    formData.append(\"file\", audioUrl);\n    formData.append(\"newroad\", JSON.stringify(newroad));\n\n    fetch(\"http://127.0.0.1:5000/voice-recognization\", {\n      method: \"POST\",\n      body: formData,\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setReceivedData({ data: data.ret });\n        setError(\" \");\n        if (data.status === -1) {\n          setError(data.err);\n        }\n      })\n      .catch((error) => console.error(\"Error:\", error));\n  }, [audioUrl]);\n\n  return (\n    <>\n      <button onClick={onRec ? onRecAudio : offRecAudio}>녹음</button>\n      <button onClick={onSubmitAudioFile}>결과 확인</button>\n    </>\n  );\n};\n\nexport default AudioRecord;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}